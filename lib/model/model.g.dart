// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Community.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Community TABLE
class TableCommunity extends SqfEntityTableBase {
  TableCommunity() {
    // declare properties of EntityTable
    tableName = 'community';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('baseUrl', DbType.text,
          isUnique: true, isNotNull: true),
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('version', DbType.text, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCommunity();
  }
}

// Setting TABLE
class TableSetting extends SqfEntityTableBase {
  TableSetting() {
    // declare properties of EntityTable
    tableName = 'settings';
    relationType = RelationType.ONE_TO_ONE;
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('isDark', DbType.bool,
          defaultValue: false, isNotNull: true),
      SqfEntityFieldRelationshipBase(TableTheme.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'themeId'),
      SqfEntityFieldRelationshipBase(
          TableCommunity.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_ONE, fieldName: '_communityId'),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSetting();
  }
}

// Theme TABLE
class TableTheme extends SqfEntityTableBase {
  TableTheme() {
    // declare properties of EntityTable
    tableName = 'theme';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('themeColor', DbType.integer, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTheme();
  }
}

// Token TABLE
class TableToken extends SqfEntityTableBase {
  TableToken() {
    // declare properties of EntityTable
    tableName = 'token';
    relationType = RelationType.ONE_TO_ONE;
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('token', DbType.text, isNotNull: true),
      SqfEntityFieldBase('refreshToken', DbType.text),
      SqfEntityFieldRelationshipBase(
          TableCommunity.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_ONE, fieldName: '_communityId'),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableToken();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class VcareDbModel extends SqfEntityModelProvider {
  VcareDbModel() {
    databaseName = vcareDbModel.databaseName;
    password = vcareDbModel.password;
    dbVersion = vcareDbModel.dbVersion;
    preSaveAction = vcareDbModel.preSaveAction;
    logFunction = vcareDbModel.logFunction;
    databaseTables = [
      TableCommunity.getInstance,
      TableSetting.getInstance,
      TableTheme.getInstance,
      TableToken.getInstance,
    ];

    bundledDatabasePath = vcareDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = vcareDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};
    controllers['community'] = CommunityController.getController;
    controllers['settings'] = SettingController.getController;
    controllers['theme'] = ThemeController.getController;
    controllers['token'] = TokenController.getController;

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Community
class Community extends TableBase {
  Community({this.id, this.baseUrl, this.name, this.version}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Community.withFields(this.baseUrl, this.name, this.version) {
    _setDefaultValues();
  }
  Community.withId(this.id, this.baseUrl, this.name, this.version) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Community.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['baseUrl'] != null) {
      baseUrl = o['baseUrl'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['version'] != null) {
      version = o['version'].toString();
    }
  }
  // FIELDS (Community)
  int? id;
  String? baseUrl;
  String? name;
  String? version;

  // end FIELDS (Community)

// COLLECTIONS & VIRTUALS (Community)
  Setting? _setting;
  Setting get setting {
    return _setting = _setting ?? Setting();
  }

  set setting(Setting setting) {
    _setting = setting;
  }

  Token? _token;
  Token get token {
    return _token = _token ?? Token();
  }

  set token(Token token) {
    _token = token;
  }

// END COLLECTIONS & VIRTUALS (Community)

  static const bool _softDeleteActivated = false;
  CommunityManager? __mnCommunity;

  CommunityManager get _mnCommunity {
    return __mnCommunity = __mnCommunity ?? CommunityManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (baseUrl != null || !forView) {
      map['baseUrl'] = baseUrl;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (version != null || !forView) {
      map['version'] = version;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (baseUrl != null || !forView) {
      map['baseUrl'] = baseUrl;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (version != null || !forView) {
      map['version'] = version;
    }

// COLLECTIONS (Community)
    if (!forQuery) {
      map['setting'] = await setting.toMapWithChildren();
    }
    if (!forQuery) {
      map['token'] = await token.toMapWithChildren();
    }
// END COLLECTIONS (Community)

    return map;
  }

  /// This method returns Json String [Community]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Community]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [baseUrl, name, version];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, baseUrl, name, version];
  }

  static Future<List<Community>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Community.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Community>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Community>[];
    try {
      objList = list
          .map((community) =>
              Community.fromMap(community as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Community.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Community>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Community> objList = <Community>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Community.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

//      RELATIONS OneToOne (Community)
      obj
        .._setting =
            await Setting().select()._communityId.equals(obj.id).toSingle()
        .._token = await Token()
            .select()
            ._communityId
            .equals(obj.id)
            .toSingle(); //      END RELATIONS OneToOne (Community)

      objList.add(obj);
    }
    return objList;
  }

  /// returns Community by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Community] if exist, otherwise returns null
  Future<Community?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Community? obj;
    final data = await _mnCommunity.getById([id]);
    if (data.length != 0) {
      obj = Community.fromMap(data[0] as Map<String, dynamic>);

//      RELATIONS OneToOne (Community)
      obj
        .._setting =
            await Setting().select()._communityId.equals(obj.id).toSingle()
        .._token = await Token()
            .select()
            ._communityId
            .equals(obj.id)
            .toSingle(); //      END RELATIONS OneToOne (Community)
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Community) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnCommunity.insert(this, ignoreBatch);
    } else {
      await _mnCommunity.update(this);
    }

// save() OneToOne relations (Community)
    _setting?._communityId = id;
    await _setting?._save();
    _token?._communityId = id;
    await _token?._save();
// END save() OneToOne relations (Community)

    return id;
  }

  /// Saves the (Community) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnCommunity.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCommunity.updateOrThrow(this);
    }

// save() OneToOne relations (Community)
    _setting?._communityId = id;
    await _setting?._save();
    _token?._communityId = id;
    await _token?._save();
// END save() OneToOne relations (Community)

    return id;
  }

  /// saveAs Community. Returns a new Primary Key value of Community

  /// <returns>Returns a new Primary Key value of Community
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

// saveAs() OneToOne relations (Community)
    setting.id = null;
    token.id = null;
// END saveAs() OneToOne relations (Community)

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Community> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Community> communities,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await VcareDbModel().batchStart();
    for (final obj in communities) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await VcareDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < communities.length; i++) {
        if (communities[i].id == null) {
          communities[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnCommunity.rawInsert(
          'INSERT OR REPLACE INTO community (id, baseUrl, name, version)  VALUES (?,?,?,?)',
          [id, baseUrl, name, version],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Community id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Community id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Community Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Community>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Community> communities,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnCommunity.rawInsertAll(
        'INSERT OR REPLACE INTO community (id, baseUrl, name, version)  VALUES (?,?,?,?)',
        communities,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Community

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Community invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Setting()
          .select()
          ._communityId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result =
          await Token().select()._communityId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnCommunity
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCommunity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Community] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  CommunityFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CommunityFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  CommunityFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CommunityFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion community

// region CommunityField
class CommunityField extends FilterBase {
  CommunityField(CommunityFilterBuilder communityFB) : super(communityFB);

  @override
  CommunityFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder isNull() {
    return super.isNull() as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as CommunityFilterBuilder;
  }

  @override
  CommunityFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as CommunityFilterBuilder;
  }

  @override
  CommunityField get not {
    return super.not as CommunityField;
  }
}
// endregion CommunityField

// region CommunityFilterBuilder
class CommunityFilterBuilder extends ConjunctionBase {
  CommunityFilterBuilder(Community obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnCommunity = obj._mnCommunity;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  CommunityManager? _mnCommunity;

  /// put the sql keyword 'AND'
  @override
  CommunityFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  CommunityFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  CommunityFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  CommunityFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  CommunityFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  CommunityFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  CommunityFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CommunityFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CommunityFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CommunityFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CommunityFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  CommunityField _setField(
      CommunityField? field, String colName, DbType dbtype) {
    return CommunityField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  CommunityField? _id;
  CommunityField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  CommunityField? _baseUrl;
  CommunityField get baseUrl {
    return _baseUrl = _setField(_baseUrl, 'baseUrl', DbType.text);
  }

  CommunityField? _name;
  CommunityField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  CommunityField? _version;
  CommunityField get version {
    return _version = _setField(_version, 'version', DbType.text);
  }

  /// Deletes List<Community> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Setting) according to DeleteRule.CASCADE
    final idListSettingBY_communityId = toListPrimaryKeySQL(false);
    final resSettingBY_communityId = await Setting()
        .select()
        .where('_communityId IN (${idListSettingBY_communityId['sql']})',
            parameterValue: idListSettingBY_communityId['args'])
        .delete(hardDelete);
    if (!resSettingBY_communityId.success) {
      return resSettingBY_communityId;
    }
// Delete sub records where in (Token) according to DeleteRule.CASCADE
    final idListTokenBY_communityId = toListPrimaryKeySQL(false);
    final resTokenBY_communityId = await Token()
        .select()
        .where('_communityId IN (${idListTokenBY_communityId['sql']})',
            parameterValue: idListTokenBY_communityId['args'])
        .delete(hardDelete);
    if (!resTokenBY_communityId.success) {
      return resTokenBY_communityId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnCommunity!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnCommunity!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from community ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnCommunity!.updateBatch(qparams, values);
  }

  /// This method always returns [Community] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Community?
  @override
  Future<Community?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnCommunity!.toList(qparams);
    final data = await objFuture;
    Community? obj;
    if (data.isNotEmpty) {
      obj = Community.fromMap(data[0] as Map<String, dynamic>);

//      RELATIONS OneToOne (Community)
      obj
        .._setting =
            await Setting().select()._communityId.equals(obj.id).toSingle()
        .._token = await Token()
            .select()
            ._communityId
            .equals(obj.id)
            .toSingle(); //      END RELATIONS OneToOne (Community)
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Community]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Community?
  @override
  Future<Community> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Community();
  }

  /// This method returns int. [Community]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? communityCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final communitiesFuture = await _mnCommunity!.toList(qparams);
    final int count = communitiesFuture[0]['CNT'] as int;
    if (communityCount != null) {
      communityCount(count);
    }
    return count;
  }

  /// This method returns List<Community> [Community]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Community>
  @override
  Future<List<Community>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Community> communitiesData = await Community.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return communitiesData;
  }

  /// This method returns Json String [Community]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Community]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Community]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnCommunity!.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Community>>
  Future<List<DropdownMenuItem<Community>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Community>> o)?
          dropDownMenu]) async {
    buildParameters();
    final communitiesFuture = _mnCommunity!.toList(qparams);

    final data = await communitiesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Community>> items = []..add(DropdownMenuItem(
        value: Community(),
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Community.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final communitiesFuture = _mnCommunity!.toList(qparams);

    final data = await communitiesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Community]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM community WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnCommunity!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Community]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnCommunity!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Community.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnCommunity!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CommunityFilterBuilder

// region CommunityFields
class CommunityFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fBaseUrl;
  static TableField get baseUrl {
    return _fBaseUrl =
        _fBaseUrl ?? SqlSyntax.setField(_fBaseUrl, 'baseUrl', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fVersion;
  static TableField get version {
    return _fVersion =
        _fVersion ?? SqlSyntax.setField(_fVersion, 'version', DbType.text);
  }
}
// endregion CommunityFields

//region CommunityManager
class CommunityManager extends SqfEntityProvider {
  CommunityManager()
      : super(VcareDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'community';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion CommunityManager
// region Setting
class Setting extends TableBase {
  Setting({this.isDark, this.themeId}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Setting.withFields(this.isDark, this.themeId, this._communityId) {
    _setDefaultValues();
  }
  Setting.withId(this.isDark, this.themeId, this._communityId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Setting.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['isDark'] != null) {
      isDark =
          o['isDark'].toString() == '1' || o['isDark'].toString() == 'true';
    }
    themeId = int.tryParse(o['themeId'].toString());

    _communityId = int.tryParse(o['_communityId'].toString());

    // RELATIONSHIPS FromMAP
    plTheme = o['theme'] != null
        ? Theme.fromMap(o['theme'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Setting)
  int? id;
  bool? isDark;
  int? themeId;
  int? _communityId;

  // end FIELDS (Setting)

// RELATIONSHIPS (Setting)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTheme', 'plField2'..]) or so on..
  Theme? plTheme;

  /// get Theme By ThemeId
  Future<Theme?> getTheme(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Theme()
        .getById(themeId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Setting)

  static const bool _softDeleteActivated = false;
  SettingManager? __mnSetting;

  SettingManager get _mnSetting {
    return __mnSetting = __mnSetting ?? SettingManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (isDark != null) {
      map['isDark'] = forQuery ? (isDark! ? 1 : 0) : isDark;
    } else if (isDark != null || !forView) {
      map['isDark'] = null;
    }
    if (themeId != null) {
      map['themeId'] = forView
          ? plTheme == null
              ? themeId
              : plTheme!.name
          : themeId;
    } else if (themeId != null || !forView) {
      map['themeId'] = null;
    }
    map['_communityId'] = _communityId;

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (isDark != null) {
      map['isDark'] = forQuery ? (isDark! ? 1 : 0) : isDark;
    } else if (isDark != null || !forView) {
      map['isDark'] = null;
    }
    if (themeId != null) {
      map['themeId'] = forView
          ? plTheme == null
              ? themeId
              : plTheme!.name
          : themeId;
    } else if (themeId != null || !forView) {
      map['themeId'] = null;
    }
    map['_communityId'] = _communityId;

    return map;
  }

  /// This method returns Json String [Setting]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Setting]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [isDark, themeId, _communityId];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [isDark, themeId, _communityId];
  }

  static Future<List<Setting>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Setting.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Setting>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Setting>[];
    try {
      objList = list
          .map((setting) => Setting.fromMap(setting as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Setting.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Setting>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Setting> objList = <Setting>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Setting.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTheme'))) {
          obj.plTheme =
              obj.plTheme ?? await obj.getTheme(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Setting by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Setting] if exist, otherwise returns null
  Future<Setting?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Setting? obj;
    final data = await _mnSetting.getById([id]);
    if (data.length != 0) {
      obj = Setting.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTheme'))) {
          obj.plTheme =
              obj.plTheme ?? await obj.getTheme(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Setting) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> _save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSetting.insert(this, ignoreBatch);
    } else {
      await _mnSetting.update(this);
    }

    return id;
  }

  /// Saves the (Setting) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> _saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSetting.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSetting.updateOrThrow(this);
    }

    return id;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSetting.rawInsert(
          'INSERT OR REPLACE INTO settings ( isDark, themeId, _communityId)  VALUES (?,?,?)',
          [isDark, themeId, _communityId],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Setting id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Setting id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Setting Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Setting

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Setting invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnSetting
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSetting.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Setting] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  SettingFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SettingFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SettingFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SettingFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDark = isDark ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion setting

// region SettingField
class SettingField extends FilterBase {
  SettingField(SettingFilterBuilder settingFB) : super(settingFB);

  @override
  SettingFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder isNull() {
    return super.isNull() as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SettingFilterBuilder;
  }

  @override
  SettingFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SettingFilterBuilder;
  }

  @override
  SettingField get not {
    return super.not as SettingField;
  }
}
// endregion SettingField

// region SettingFilterBuilder
class SettingFilterBuilder extends ConjunctionBase {
  SettingFilterBuilder(Setting obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSetting = obj._mnSetting;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SettingManager? _mnSetting;

  /// put the sql keyword 'AND'
  @override
  SettingFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SettingFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SettingFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SettingFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SettingFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SettingFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SettingFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SettingFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SettingFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SettingFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SettingFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SettingField _setField(SettingField? field, String colName, DbType dbtype) {
    return SettingField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SettingField? _id;
  SettingField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  SettingField? _isDark;
  SettingField get isDark {
    return _isDark = _setField(_isDark, 'isDark', DbType.bool);
  }

  SettingField? _themeId;
  SettingField get themeId {
    return _themeId = _setField(_themeId, 'themeId', DbType.integer);
  }

  SettingField? __communityId;
  SettingField get _communityId {
    return __communityId =
        _setField(__communityId, '_communityId', DbType.integer);
  }

  /// Deletes List<Setting> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSetting!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSetting!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from settings ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSetting!.updateBatch(qparams, values);
  }

  /// This method always returns [Setting] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Setting?
  @override
  Future<Setting?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSetting!.toList(qparams);
    final data = await objFuture;
    Setting? obj;
    if (data.isNotEmpty) {
      obj = Setting.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTheme'))) {
          obj.plTheme =
              obj.plTheme ?? await obj.getTheme(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Setting]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Setting?
  @override
  Future<Setting> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Setting();
  }

  /// This method returns int. [Setting]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? settingCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final settingsFuture = await _mnSetting!.toList(qparams);
    final int count = settingsFuture[0]['CNT'] as int;
    if (settingCount != null) {
      settingCount(count);
    }
    return count;
  }

  /// This method returns List<Setting> [Setting]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Setting>
  @override
  Future<List<Setting>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Setting> settingsData = await Setting.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return settingsData;
  }

  /// This method returns Json String [Setting]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Setting]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Setting]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSetting!.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Setting>>
  Future<List<DropdownMenuItem<Setting>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Setting>> o)?
          dropDownMenu]) async {
    buildParameters();
    final settingsFuture = _mnSetting!.toList(qparams);

    final data = await settingsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Setting>> items = []..add(DropdownMenuItem(
        value: Setting(),
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Setting.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final settingsFuture = _mnSetting!.toList(qparams);

    final data = await settingsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Setting]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM settings WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSetting!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Setting]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSetting!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Setting.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSetting!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SettingFilterBuilder

// region SettingFields
class SettingFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fIsDark;
  static TableField get isDark {
    return _fIsDark =
        _fIsDark ?? SqlSyntax.setField(_fIsDark, 'isDark', DbType.bool);
  }

  static TableField? _fThemeId;
  static TableField get themeId {
    return _fThemeId =
        _fThemeId ?? SqlSyntax.setField(_fThemeId, 'themeId', DbType.integer);
  }
}
// endregion SettingFields

//region SettingManager
class SettingManager extends SqfEntityProvider {
  SettingManager()
      : super(VcareDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'settings';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion SettingManager
// region Theme
class Theme extends TableBase {
  Theme({this.id, this.name, this.themeColor}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Theme.withFields(this.name, this.themeColor) {
    _setDefaultValues();
  }
  Theme.withId(this.id, this.name, this.themeColor) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Theme.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['themeColor'] != null) {
      themeColor = int.tryParse(o['themeColor'].toString());
    }
  }
  // FIELDS (Theme)
  int? id;
  String? name;
  int? themeColor;

  // end FIELDS (Theme)

// COLLECTIONS & VIRTUALS (Theme)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSettings', 'plField2'..]) or so on..
  List<Setting>? plSettings;

  /// get Setting(s) filtered by id=themeId
  SettingFilterBuilder? getSettings(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Setting()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .themeId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Theme)

  static const bool _softDeleteActivated = false;
  ThemeManager? __mnTheme;

  ThemeManager get _mnTheme {
    return __mnTheme = __mnTheme ?? ThemeManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (themeColor != null || !forView) {
      map['themeColor'] = themeColor;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (themeColor != null || !forView) {
      map['themeColor'] = themeColor;
    }

// COLLECTIONS (Theme)
    if (!forQuery) {
      map['Settings'] = await getSettings()!.toMapList();
    }
// END COLLECTIONS (Theme)

    return map;
  }

  /// This method returns Json String [Theme]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Theme]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, themeColor];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, themeColor];
  }

  static Future<List<Theme>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Theme.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Theme>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Theme>[];
    try {
      objList = list
          .map((theme) => Theme.fromMap(theme as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Theme.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Theme>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Theme> objList = <Theme>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Theme.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('theme.plSettings') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSettings'))) {
          /*_loadedfields!.add('theme.plSettings'); */ obj.plSettings =
              obj.plSettings ??
                  await obj.getSettings()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Theme by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Theme] if exist, otherwise returns null
  Future<Theme?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Theme? obj;
    final data = await _mnTheme.getById([id]);
    if (data.length != 0) {
      obj = Theme.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('theme.plSettings') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSettings'))) {
          /*_loadedfields!.add('theme.plSettings'); */ obj.plSettings =
              obj.plSettings ??
                  await obj.getSettings()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Theme) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTheme.insert(this, ignoreBatch);
    } else {
      await _mnTheme.update(this);
    }

    return id;
  }

  /// Saves the (Theme) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTheme.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTheme.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Theme. Returns a new Primary Key value of Theme

  /// <returns>Returns a new Primary Key value of Theme
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Theme> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Theme> themes,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await VcareDbModel().batchStart();
    for (final obj in themes) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await VcareDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < themes.length; i++) {
        if (themes[i].id == null) {
          themes[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTheme.rawInsert(
          'INSERT OR REPLACE INTO theme (id, name, themeColor)  VALUES (?,?,?)',
          [id, name, themeColor],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Theme id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Theme id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Theme Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Theme>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Theme> themes,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTheme.rawInsertAll(
        'INSERT OR REPLACE INTO theme (id, name, themeColor)  VALUES (?,?,?)',
        themes,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Theme

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Theme invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Setting().select().themeId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnTheme
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTheme.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Theme] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ThemeFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ThemeFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ThemeFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ThemeFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion theme

// region ThemeField
class ThemeField extends FilterBase {
  ThemeField(ThemeFilterBuilder themeFB) : super(themeFB);

  @override
  ThemeFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder isNull() {
    return super.isNull() as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ThemeFilterBuilder;
  }

  @override
  ThemeFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ThemeFilterBuilder;
  }

  @override
  ThemeField get not {
    return super.not as ThemeField;
  }
}
// endregion ThemeField

// region ThemeFilterBuilder
class ThemeFilterBuilder extends ConjunctionBase {
  ThemeFilterBuilder(Theme obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnTheme = obj._mnTheme;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ThemeManager? _mnTheme;

  /// put the sql keyword 'AND'
  @override
  ThemeFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ThemeFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ThemeFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ThemeFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ThemeFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ThemeFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ThemeFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ThemeFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ThemeFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ThemeFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ThemeFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ThemeField _setField(ThemeField? field, String colName, DbType dbtype) {
    return ThemeField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ThemeField? _id;
  ThemeField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ThemeField? _name;
  ThemeField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  ThemeField? _themeColor;
  ThemeField get themeColor {
    return _themeColor = _setField(_themeColor, 'themeColor', DbType.integer);
  }

  /// Deletes List<Theme> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Setting) according to DeleteRule.CASCADE
    final idListSettingBYthemeId = toListPrimaryKeySQL(false);
    final resSettingBYthemeId = await Setting()
        .select()
        .where('themeId IN (${idListSettingBYthemeId['sql']})',
            parameterValue: idListSettingBYthemeId['args'])
        .delete(hardDelete);
    if (!resSettingBYthemeId.success) {
      return resSettingBYthemeId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTheme!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTheme!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from theme ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTheme!.updateBatch(qparams, values);
  }

  /// This method always returns [Theme] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Theme?
  @override
  Future<Theme?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTheme!.toList(qparams);
    final data = await objFuture;
    Theme? obj;
    if (data.isNotEmpty) {
      obj = Theme.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('theme.plSettings') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSettings'))) {
          /*_loadedfields!.add('theme.plSettings'); */ obj.plSettings =
              obj.plSettings ??
                  await obj.getSettings()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Theme]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Theme?
  @override
  Future<Theme> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Theme();
  }

  /// This method returns int. [Theme]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? themeCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final themesFuture = await _mnTheme!.toList(qparams);
    final int count = themesFuture[0]['CNT'] as int;
    if (themeCount != null) {
      themeCount(count);
    }
    return count;
  }

  /// This method returns List<Theme> [Theme]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Theme>
  @override
  Future<List<Theme>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Theme> themesData = await Theme.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return themesData;
  }

  /// This method returns Json String [Theme]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Theme]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Theme]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTheme!.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Theme>>
  Future<List<DropdownMenuItem<Theme>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Theme>> o)?
          dropDownMenu]) async {
    buildParameters();
    final themesFuture = _mnTheme!.toList(qparams);

    final data = await themesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Theme>> items = []..add(DropdownMenuItem(
        value: Theme(),
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Theme.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final themesFuture = _mnTheme!.toList(qparams);

    final data = await themesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Theme]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM theme WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTheme!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Theme]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTheme!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Theme.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTheme!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ThemeFilterBuilder

// region ThemeFields
class ThemeFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fThemeColor;
  static TableField get themeColor {
    return _fThemeColor = _fThemeColor ??
        SqlSyntax.setField(_fThemeColor, 'themeColor', DbType.integer);
  }
}
// endregion ThemeFields

//region ThemeManager
class ThemeManager extends SqfEntityProvider {
  ThemeManager()
      : super(VcareDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'theme';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ThemeManager
// region Token
class Token extends TableBase {
  Token({this.token, this.refreshToken}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Token.withFields(this.token, this.refreshToken, this._communityId) {
    _setDefaultValues();
  }
  Token.withId(this.token, this.refreshToken, this._communityId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Token.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['token'] != null) {
      token = o['token'].toString();
    }
    if (o['refreshToken'] != null) {
      refreshToken = o['refreshToken'].toString();
    }
    _communityId = int.tryParse(o['_communityId'].toString());
  }
  // FIELDS (Token)
  int? id;
  String? token;
  String? refreshToken;
  int? _communityId;

  // end FIELDS (Token)

  static const bool _softDeleteActivated = false;
  TokenManager? __mnToken;

  TokenManager get _mnToken {
    return __mnToken = __mnToken ?? TokenManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (token != null || !forView) {
      map['token'] = token;
    }
    if (refreshToken != null || !forView) {
      map['refreshToken'] = refreshToken;
    }
    map['_communityId'] = _communityId;

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (token != null || !forView) {
      map['token'] = token;
    }
    if (refreshToken != null || !forView) {
      map['refreshToken'] = refreshToken;
    }
    map['_communityId'] = _communityId;

    return map;
  }

  /// This method returns Json String [Token]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Token]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [token, refreshToken, _communityId];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [token, refreshToken, _communityId];
  }

  static Future<List<Token>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Token.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Token>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Token>[];
    try {
      objList = list
          .map((token) => Token.fromMap(token as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Token.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Token>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Token> objList = <Token>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Token.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Token by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Token] if exist, otherwise returns null
  Future<Token?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Token? obj;
    final data = await _mnToken.getById([id]);
    if (data.length != 0) {
      obj = Token.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Token) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> _save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnToken.insert(this, ignoreBatch);
    } else {
      await _mnToken.update(this);
    }

    return id;
  }

  /// Saves the (Token) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> _saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnToken.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnToken.updateOrThrow(this);
    }

    return id;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnToken.rawInsert(
          'INSERT OR REPLACE INTO token ( token, refreshToken, _communityId)  VALUES (?,?,?)',
          [token, refreshToken, _communityId],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Token id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Token id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Token Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Token

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Token invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnToken
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnToken.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Token] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  TokenFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TokenFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TokenFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TokenFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion token

// region TokenField
class TokenField extends FilterBase {
  TokenField(TokenFilterBuilder tokenFB) : super(tokenFB);

  @override
  TokenFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder isNull() {
    return super.isNull() as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TokenFilterBuilder;
  }

  @override
  TokenField get not {
    return super.not as TokenField;
  }
}
// endregion TokenField

// region TokenFilterBuilder
class TokenFilterBuilder extends ConjunctionBase {
  TokenFilterBuilder(Token obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnToken = obj._mnToken;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TokenManager? _mnToken;

  /// put the sql keyword 'AND'
  @override
  TokenFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TokenFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TokenFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TokenFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TokenFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TokenFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TokenFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TokenFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TokenFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TokenFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TokenFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TokenField _setField(TokenField? field, String colName, DbType dbtype) {
    return TokenField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TokenField? _id;
  TokenField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TokenField? _token;
  TokenField get token {
    return _token = _setField(_token, 'token', DbType.text);
  }

  TokenField? _refreshToken;
  TokenField get refreshToken {
    return _refreshToken =
        _setField(_refreshToken, 'refreshToken', DbType.text);
  }

  TokenField? __communityId;
  TokenField get _communityId {
    return __communityId =
        _setField(__communityId, '_communityId', DbType.integer);
  }

  /// Deletes List<Token> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnToken!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnToken!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from token ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnToken!.updateBatch(qparams, values);
  }

  /// This method always returns [Token] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Token?
  @override
  Future<Token?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnToken!.toList(qparams);
    final data = await objFuture;
    Token? obj;
    if (data.isNotEmpty) {
      obj = Token.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Token]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Token?
  @override
  Future<Token> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Token();
  }

  /// This method returns int. [Token]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? tokenCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tokensFuture = await _mnToken!.toList(qparams);
    final int count = tokensFuture[0]['CNT'] as int;
    if (tokenCount != null) {
      tokenCount(count);
    }
    return count;
  }

  /// This method returns List<Token> [Token]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Token>
  @override
  Future<List<Token>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Token> tokensData = await Token.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tokensData;
  }

  /// This method returns Json String [Token]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Token]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Token]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnToken!.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Token>>
  Future<List<DropdownMenuItem<Token>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Token>> o)?
          dropDownMenu]) async {
    buildParameters();
    final tokensFuture = _mnToken!.toList(qparams);

    final data = await tokensFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Token>> items = []..add(DropdownMenuItem(
        value: Token(),
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Token.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final tokensFuture = _mnToken!.toList(qparams);

    final data = await tokensFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Token]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM token WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnToken!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Token]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnToken!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Token.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnToken!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TokenFilterBuilder

// region TokenFields
class TokenFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fToken;
  static TableField get token {
    return _fToken =
        _fToken ?? SqlSyntax.setField(_fToken, 'token', DbType.text);
  }

  static TableField? _fRefreshToken;
  static TableField get refreshToken {
    return _fRefreshToken = _fRefreshToken ??
        SqlSyntax.setField(_fRefreshToken, 'refreshToken', DbType.text);
  }
}
// endregion TokenFields

//region TokenManager
class TokenManager extends SqfEntityProvider {
  TokenManager()
      : super(VcareDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'token';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TokenManager
class VcareDbModelSequenceManager extends SqfEntityProvider {
  VcareDbModelSequenceManager() : super(VcareDbModel());
}
// END OF ENTITIES

// BEGIN CONTROLLERS
// BEGIN CONTROLLER (Community)
class CommunityToSettingControllerSub extends SettingController {
  static String relationshipFieldName = '_communityId';
  static String primaryKeyName = 'id';
  static bool useSoftDeleting = false;
  //static String formListTitleField = 'baseUrl';
  //static String formListSubTitleField = 'name';
}

class CommunityToTokenControllerSub extends TokenController {
  static String relationshipFieldName = '_communityId';
  static String primaryKeyName = 'id';
  static bool useSoftDeleting = false;
  //static String formListTitleField = 'baseUrl';
  //static String formListSubTitleField = 'name';
}

class CommunityController extends Community {
  String formListTitleField = 'baseUrl';
  String formListSubTitleField = 'name';
  static SQFViewList getController = SQFViewList(
    CommunityController(),
    primaryKeyName: 'id',
    useSoftDeleting: false,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};
    menu['CommunityToSetting'] = 'Community To Setting(_communityId)';
    menu['CommunityToToken'] = 'Community To Token(_communityId)';

    return menu;
  }

  SQFViewList? subList(int id, String controllerName) {
    switch (controllerName) {
      case 'CommunityToSetting':
        return SQFViewList(
          CommunityToSettingControllerSub(),
          primaryKeyName: CommunityToSettingControllerSub.primaryKeyName,
          useSoftDeleting: CommunityToSettingControllerSub.useSoftDeleting,
          //formListTitleField: 'baseUrl',
          //formListSubTitleField: 'name',
          filterExpression:
              '${CommunityToSettingControllerSub.relationshipFieldName}=?',
          filterParameter: id,
        );
      case 'CommunityToToken':
        return SQFViewList(
          CommunityToTokenControllerSub(),
          primaryKeyName: CommunityToTokenControllerSub.primaryKeyName,
          useSoftDeleting: CommunityToTokenControllerSub.useSoftDeleting,
          //formListTitleField: 'baseUrl',
          //formListSubTitleField: 'name',
          filterExpression:
              '${CommunityToTokenControllerSub.relationshipFieldName}=?',
          filterParameter: id,
        );

      default:
        return null;
    }
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return CommunityAdd(obj == null
        ? Community()
        : await Community().getById(obj['id'] as int) ?? Community());
  }
}
// END CONTROLLER (Community)

// BEGIN CONTROLLER (Setting)

class SettingController extends Setting {
  String formListTitleField = 'id';
  String formListSubTitleField = 'isDark';
  static SQFViewList getController = SQFViewList(
    SettingController(),
    primaryKeyName: 'id',
    useSoftDeleting: false,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return SettingAdd(obj == null
        ? Setting()
        : await Setting().getById(obj['id'] as int) ?? Setting());
  }
}
// END CONTROLLER (Setting)

// BEGIN CONTROLLER (Theme)
class ThemeToSettingControllerSub extends SettingController {
  static String relationshipFieldName = 'themeId';
  static String primaryKeyName = 'id';
  static bool useSoftDeleting = false;
  //static String formListTitleField = 'name';
  //static String formListSubTitleField = 'themeColor';
}

class ThemeController extends Theme {
  String formListTitleField = 'name';
  String formListSubTitleField = 'themeColor';
  static SQFViewList getController = SQFViewList(
    ThemeController(),
    primaryKeyName: 'id',
    useSoftDeleting: false,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};
    menu['ThemeToSetting'] = 'Theme To Setting(themeId)';

    return menu;
  }

  SQFViewList? subList(int id, String controllerName) {
    switch (controllerName) {
      case 'ThemeToSetting':
        return SQFViewList(
          ThemeToSettingControllerSub(),
          primaryKeyName: ThemeToSettingControllerSub.primaryKeyName,
          useSoftDeleting: ThemeToSettingControllerSub.useSoftDeleting,
          //formListTitleField: 'name',
          //formListSubTitleField: 'themeColor',
          filterExpression:
              '${ThemeToSettingControllerSub.relationshipFieldName}=?',
          filterParameter: id,
        );

      default:
        return null;
    }
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return ThemeAdd(obj == null
        ? Theme()
        : await Theme().getById(obj['id'] as int) ?? Theme());
  }
}
// END CONTROLLER (Theme)

// BEGIN CONTROLLER (Token)

class TokenController extends Token {
  String formListTitleField = 'token';
  String formListSubTitleField = 'refreshToken';
  static SQFViewList getController = SQFViewList(
    TokenController(),
    primaryKeyName: 'id',
    useSoftDeleting: false,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return TokenAdd(obj == null
        ? Token()
        : await Token().getById(obj['id'] as int) ?? Token());
  }
}
// END CONTROLLER (Token)

// END OF CONTROLLERS

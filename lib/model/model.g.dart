// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Config.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Config TABLE
class TableConfig extends SqfEntityTableBase {
  TableConfig() {
    // declare properties of EntityTable
    tableName = 'config';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('baseUrl', DbType.text,
          isUnique: true, isNotNull: true),
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('version', DbType.text, isNotNull: true),
      SqfEntityFieldBase('isDark', DbType.bool,
          defaultValue: false, isNotNull: true),
      SqfEntityFieldRelationshipBase(
          TableAppTheme.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'appThemeId',
          isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableConfig();
  }
}

// AppTheme TABLE
class TableAppTheme extends SqfEntityTableBase {
  TableAppTheme() {
    // declare properties of EntityTable
    tableName = 'appTheme';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('themeColor', DbType.integer,
          isUnique: true, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAppTheme();
  }
}

// Token TABLE
class TableToken extends SqfEntityTableBase {
  TableToken() {
    // declare properties of EntityTable
    tableName = 'token';
    relationType = RelationType.ONE_TO_ONE;
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('token', DbType.text, isNotNull: true),
      SqfEntityFieldBase('refreshToken', DbType.text),
      SqfEntityFieldRelationshipBase(
          TableConfig.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_ONE, fieldName: '_configId'),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableToken();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class VcareDbModel extends SqfEntityModelProvider {
  VcareDbModel() {
    databaseName = vcareDbModel.databaseName;
    password = vcareDbModel.password;
    dbVersion = vcareDbModel.dbVersion;
    preSaveAction = vcareDbModel.preSaveAction;
    logFunction = vcareDbModel.logFunction;
    databaseTables = [
      TableConfig.getInstance,
      TableAppTheme.getInstance,
      TableToken.getInstance,
    ];

    bundledDatabasePath = vcareDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = vcareDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};
    controllers['config'] = ConfigController.getController;
    controllers['apptheme'] = AppThemeController.getController;
    controllers['token'] = TokenController.getController;

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Config
class Config extends TableBase {
  Config(
      {this.id,
      this.baseUrl,
      this.name,
      this.version,
      this.isDark,
      this.appThemeId}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Config.withFields(
      this.baseUrl, this.name, this.version, this.isDark, this.appThemeId) {
    _setDefaultValues();
  }
  Config.withId(this.id, this.baseUrl, this.name, this.version, this.isDark,
      this.appThemeId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Config.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['baseUrl'] != null) {
      baseUrl = o['baseUrl'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['version'] != null) {
      version = o['version'].toString();
    }
    if (o['isDark'] != null) {
      isDark =
          o['isDark'].toString() == '1' || o['isDark'].toString() == 'true';
    }
    appThemeId = int.tryParse(o['appThemeId'].toString());

    // RELATIONSHIPS FromMAP
    plAppTheme = o['appTheme'] != null
        ? AppTheme.fromMap(o['appTheme'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Config)
  int? id;
  String? baseUrl;
  String? name;
  String? version;
  bool? isDark;
  int? appThemeId;

  // end FIELDS (Config)

// RELATIONSHIPS (Config)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plAppTheme', 'plField2'..]) or so on..
  AppTheme? plAppTheme;

  /// get AppTheme By AppThemeId
  Future<AppTheme?> getAppTheme(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await AppTheme().getById(appThemeId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Config)

// COLLECTIONS & VIRTUALS (Config)
  Token? _token;
  Token get token {
    return _token = _token ?? Token();
  }

  set token(Token token) {
    _token = token;
  }

// END COLLECTIONS & VIRTUALS (Config)

  static const bool _softDeleteActivated = false;
  ConfigManager? __mnConfig;

  ConfigManager get _mnConfig {
    return __mnConfig = __mnConfig ?? ConfigManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (baseUrl != null || !forView) {
      map['baseUrl'] = baseUrl;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (version != null || !forView) {
      map['version'] = version;
    }
    if (isDark != null) {
      map['isDark'] = forQuery ? (isDark! ? 1 : 0) : isDark;
    } else if (isDark != null || !forView) {
      map['isDark'] = null;
    }
    if (appThemeId != null) {
      map['appThemeId'] = forView
          ? plAppTheme == null
              ? appThemeId
              : plAppTheme!.name
          : appThemeId;
    } else if (appThemeId != null || !forView) {
      map['appThemeId'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (baseUrl != null || !forView) {
      map['baseUrl'] = baseUrl;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (version != null || !forView) {
      map['version'] = version;
    }
    if (isDark != null) {
      map['isDark'] = forQuery ? (isDark! ? 1 : 0) : isDark;
    } else if (isDark != null || !forView) {
      map['isDark'] = null;
    }
    if (appThemeId != null) {
      map['appThemeId'] = forView
          ? plAppTheme == null
              ? appThemeId
              : plAppTheme!.name
          : appThemeId;
    } else if (appThemeId != null || !forView) {
      map['appThemeId'] = null;
    }

// COLLECTIONS (Config)
    if (!forQuery) {
      map['token'] = await token.toMapWithChildren();
    }
// END COLLECTIONS (Config)

    return map;
  }

  /// This method returns Json String [Config]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Config]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [baseUrl, name, version, isDark, appThemeId];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, baseUrl, name, version, isDark, appThemeId];
  }

  static Future<List<Config>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Config.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Config>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Config>[];
    try {
      objList = list
          .map((config) => Config.fromMap(config as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Config.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Config>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Config> objList = <Config>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Config.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

//      RELATIONS OneToOne (Config)
      obj._token = await Token()
          .select()
          ._configId
          .equals(obj.id)
          .toSingle(); //      END RELATIONS OneToOne (Config)

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plAppTheme'))) {
          obj.plAppTheme =
              obj.plAppTheme ?? await obj.getAppTheme(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Config by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Config] if exist, otherwise returns null
  Future<Config?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Config? obj;
    final data = await _mnConfig.getById([id]);
    if (data.length != 0) {
      obj = Config.fromMap(data[0] as Map<String, dynamic>);

//      RELATIONS OneToOne (Config)
      obj._token = await Token()
          .select()
          ._configId
          .equals(obj.id)
          .toSingle(); //      END RELATIONS OneToOne (Config)

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plAppTheme'))) {
          obj.plAppTheme =
              obj.plAppTheme ?? await obj.getAppTheme(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Config) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnConfig.insert(this, ignoreBatch);
    } else {
      await _mnConfig.update(this);
    }

// save() OneToOne relations (Config)
    _token?._configId = id;
    await _token?._save();
// END save() OneToOne relations (Config)

    return id;
  }

  /// Saves the (Config) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnConfig.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnConfig.updateOrThrow(this);
    }

// save() OneToOne relations (Config)
    _token?._configId = id;
    await _token?._save();
// END save() OneToOne relations (Config)

    return id;
  }

  /// saveAs Config. Returns a new Primary Key value of Config

  /// <returns>Returns a new Primary Key value of Config
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

// saveAs() OneToOne relations (Config)
    token.id = null;
// END saveAs() OneToOne relations (Config)

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Config> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Config> configs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await VcareDbModel().batchStart();
    for (final obj in configs) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await VcareDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < configs.length; i++) {
        if (configs[i].id == null) {
          configs[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnConfig.rawInsert(
          'INSERT OR REPLACE INTO config (id, baseUrl, name, version, isDark, appThemeId)  VALUES (?,?,?,?,?,?)',
          [id, baseUrl, name, version, isDark, appThemeId],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Config id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Config id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Config Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Config>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Config> configs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnConfig.rawInsertAll(
        'INSERT OR REPLACE INTO config (id, baseUrl, name, version, isDark, appThemeId)  VALUES (?,?,?,?,?,?)',
        configs,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Config

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Config invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Token().select()._configId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnConfig
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnConfig.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Config] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ConfigFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ConfigFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ConfigFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ConfigFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDark = isDark ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion config

// region ConfigField
class ConfigField extends FilterBase {
  ConfigField(ConfigFilterBuilder configFB) : super(configFB);

  @override
  ConfigFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder isNull() {
    return super.isNull() as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ConfigFilterBuilder;
  }

  @override
  ConfigFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ConfigFilterBuilder;
  }

  @override
  ConfigField get not {
    return super.not as ConfigField;
  }
}
// endregion ConfigField

// region ConfigFilterBuilder
class ConfigFilterBuilder extends ConjunctionBase {
  ConfigFilterBuilder(Config obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnConfig = obj._mnConfig;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ConfigManager? _mnConfig;

  /// put the sql keyword 'AND'
  @override
  ConfigFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ConfigFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ConfigFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ConfigFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ConfigFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ConfigFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ConfigFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ConfigFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ConfigFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ConfigFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ConfigFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ConfigField _setField(ConfigField? field, String colName, DbType dbtype) {
    return ConfigField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ConfigField? _id;
  ConfigField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ConfigField? _baseUrl;
  ConfigField get baseUrl {
    return _baseUrl = _setField(_baseUrl, 'baseUrl', DbType.text);
  }

  ConfigField? _name;
  ConfigField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  ConfigField? _version;
  ConfigField get version {
    return _version = _setField(_version, 'version', DbType.text);
  }

  ConfigField? _isDark;
  ConfigField get isDark {
    return _isDark = _setField(_isDark, 'isDark', DbType.bool);
  }

  ConfigField? _appThemeId;
  ConfigField get appThemeId {
    return _appThemeId = _setField(_appThemeId, 'appThemeId', DbType.integer);
  }

  /// Deletes List<Config> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Token) according to DeleteRule.CASCADE
    final idListTokenBY_configId = toListPrimaryKeySQL(false);
    final resTokenBY_configId = await Token()
        .select()
        .where('_configId IN (${idListTokenBY_configId['sql']})',
            parameterValue: idListTokenBY_configId['args'])
        .delete(hardDelete);
    if (!resTokenBY_configId.success) {
      return resTokenBY_configId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnConfig!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnConfig!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from config ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnConfig!.updateBatch(qparams, values);
  }

  /// This method always returns [Config] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Config?
  @override
  Future<Config?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnConfig!.toList(qparams);
    final data = await objFuture;
    Config? obj;
    if (data.isNotEmpty) {
      obj = Config.fromMap(data[0] as Map<String, dynamic>);

//      RELATIONS OneToOne (Config)
      obj._token = await Token()
          .select()
          ._configId
          .equals(obj.id)
          .toSingle(); //      END RELATIONS OneToOne (Config)

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plAppTheme'))) {
          obj.plAppTheme =
              obj.plAppTheme ?? await obj.getAppTheme(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Config]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Config?
  @override
  Future<Config> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Config();
  }

  /// This method returns int. [Config]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? configCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final configsFuture = await _mnConfig!.toList(qparams);
    final int count = configsFuture[0]['CNT'] as int;
    if (configCount != null) {
      configCount(count);
    }
    return count;
  }

  /// This method returns List<Config> [Config]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Config>
  @override
  Future<List<Config>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Config> configsData = await Config.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return configsData;
  }

  /// This method returns Json String [Config]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Config]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Config]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnConfig!.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Config>>
  Future<List<DropdownMenuItem<Config>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Config>> o)?
          dropDownMenu]) async {
    buildParameters();
    final configsFuture = _mnConfig!.toList(qparams);

    final data = await configsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Config>> items = []..add(DropdownMenuItem(
        value: Config(),
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Config.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final configsFuture = _mnConfig!.toList(qparams);

    final data = await configsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Config]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM config WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnConfig!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Config]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnConfig!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Config.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnConfig!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ConfigFilterBuilder

// region ConfigFields
class ConfigFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fBaseUrl;
  static TableField get baseUrl {
    return _fBaseUrl =
        _fBaseUrl ?? SqlSyntax.setField(_fBaseUrl, 'baseUrl', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fVersion;
  static TableField get version {
    return _fVersion =
        _fVersion ?? SqlSyntax.setField(_fVersion, 'version', DbType.text);
  }

  static TableField? _fIsDark;
  static TableField get isDark {
    return _fIsDark =
        _fIsDark ?? SqlSyntax.setField(_fIsDark, 'isDark', DbType.bool);
  }

  static TableField? _fAppThemeId;
  static TableField get appThemeId {
    return _fAppThemeId = _fAppThemeId ??
        SqlSyntax.setField(_fAppThemeId, 'appThemeId', DbType.integer);
  }
}
// endregion ConfigFields

//region ConfigManager
class ConfigManager extends SqfEntityProvider {
  ConfigManager()
      : super(VcareDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'config';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ConfigManager
// region AppTheme
class AppTheme extends TableBase {
  AppTheme({this.id, this.name, this.themeColor}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  AppTheme.withFields(this.name, this.themeColor) {
    _setDefaultValues();
  }
  AppTheme.withId(this.id, this.name, this.themeColor) {
    _setDefaultValues();
  }
  // fromMap v2.0
  AppTheme.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['themeColor'] != null) {
      themeColor = int.tryParse(o['themeColor'].toString());
    }
  }
  // FIELDS (AppTheme)
  int? id;
  String? name;
  int? themeColor;

  // end FIELDS (AppTheme)

// COLLECTIONS & VIRTUALS (AppTheme)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plConfigs', 'plField2'..]) or so on..
  List<Config>? plConfigs;

  /// get Config(s) filtered by id=appThemeId
  ConfigFilterBuilder? getConfigs(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Config()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .appThemeId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (AppTheme)

  static const bool _softDeleteActivated = false;
  AppThemeManager? __mnAppTheme;

  AppThemeManager get _mnAppTheme {
    return __mnAppTheme = __mnAppTheme ?? AppThemeManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (themeColor != null || !forView) {
      map['themeColor'] = themeColor;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (themeColor != null || !forView) {
      map['themeColor'] = themeColor;
    }

// COLLECTIONS (AppTheme)
    if (!forQuery) {
      map['Configs'] = await getConfigs()!.toMapList();
    }
// END COLLECTIONS (AppTheme)

    return map;
  }

  /// This method returns Json String [AppTheme]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [AppTheme]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, themeColor];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, themeColor];
  }

  static Future<List<AppTheme>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR AppTheme.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<AppTheme>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <AppTheme>[];
    try {
      objList = list
          .map((apptheme) => AppTheme.fromMap(apptheme as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR AppTheme.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<AppTheme>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<AppTheme> objList = <AppTheme>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = AppTheme.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('appTheme.plConfigs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plConfigs'))) {
          /*_loadedfields!.add('appTheme.plConfigs'); */ obj.plConfigs =
              obj.plConfigs ??
                  await obj.getConfigs()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns AppTheme by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [AppTheme] if exist, otherwise returns null
  Future<AppTheme?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    AppTheme? obj;
    final data = await _mnAppTheme.getById([id]);
    if (data.length != 0) {
      obj = AppTheme.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('appTheme.plConfigs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plConfigs'))) {
          /*_loadedfields!.add('appTheme.plConfigs'); */ obj.plConfigs =
              obj.plConfigs ??
                  await obj.getConfigs()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (AppTheme) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnAppTheme.insert(this, ignoreBatch);
    } else {
      await _mnAppTheme.update(this);
    }

    return id;
  }

  /// Saves the (AppTheme) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnAppTheme.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnAppTheme.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs AppTheme. Returns a new Primary Key value of AppTheme

  /// <returns>Returns a new Primary Key value of AppTheme
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<AppTheme> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<AppTheme> appthemes,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await VcareDbModel().batchStart();
    for (final obj in appthemes) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await VcareDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < appthemes.length; i++) {
        if (appthemes[i].id == null) {
          appthemes[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAppTheme.rawInsert(
          'INSERT OR REPLACE INTO appTheme (id, name, themeColor)  VALUES (?,?,?)',
          [id, name, themeColor],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'AppTheme id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'AppTheme id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'AppTheme Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<AppTheme>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<AppTheme> appthemes,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnAppTheme.rawInsertAll(
        'INSERT OR REPLACE INTO appTheme (id, name, themeColor)  VALUES (?,?,?)',
        appthemes,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes AppTheme

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete AppTheme invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Config().select().appThemeId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnAppTheme
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAppTheme.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [AppTheme] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  AppThemeFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AppThemeFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  AppThemeFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AppThemeFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion apptheme

// region AppThemeField
class AppThemeField extends FilterBase {
  AppThemeField(AppThemeFilterBuilder appthemeFB) : super(appthemeFB);

  @override
  AppThemeFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder isNull() {
    return super.isNull() as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as AppThemeFilterBuilder;
  }

  @override
  AppThemeFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as AppThemeFilterBuilder;
  }

  @override
  AppThemeField get not {
    return super.not as AppThemeField;
  }
}
// endregion AppThemeField

// region AppThemeFilterBuilder
class AppThemeFilterBuilder extends ConjunctionBase {
  AppThemeFilterBuilder(AppTheme obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnAppTheme = obj._mnAppTheme;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  AppThemeManager? _mnAppTheme;

  /// put the sql keyword 'AND'
  @override
  AppThemeFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  AppThemeFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  AppThemeFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  AppThemeFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  AppThemeFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  AppThemeFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  AppThemeFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AppThemeFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AppThemeFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AppThemeFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AppThemeFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  AppThemeField _setField(AppThemeField? field, String colName, DbType dbtype) {
    return AppThemeField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  AppThemeField? _id;
  AppThemeField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  AppThemeField? _name;
  AppThemeField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  AppThemeField? _themeColor;
  AppThemeField get themeColor {
    return _themeColor = _setField(_themeColor, 'themeColor', DbType.integer);
  }

  /// Deletes List<AppTheme> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Config) according to DeleteRule.CASCADE
    final idListConfigBYappThemeId = toListPrimaryKeySQL(false);
    final resConfigBYappThemeId = await Config()
        .select()
        .where('appThemeId IN (${idListConfigBYappThemeId['sql']})',
            parameterValue: idListConfigBYappThemeId['args'])
        .delete(hardDelete);
    if (!resConfigBYappThemeId.success) {
      return resConfigBYappThemeId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnAppTheme!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnAppTheme!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from appTheme ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnAppTheme!.updateBatch(qparams, values);
  }

  /// This method always returns [AppTheme] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> AppTheme?
  @override
  Future<AppTheme?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnAppTheme!.toList(qparams);
    final data = await objFuture;
    AppTheme? obj;
    if (data.isNotEmpty) {
      obj = AppTheme.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('appTheme.plConfigs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plConfigs'))) {
          /*_loadedfields!.add('appTheme.plConfigs'); */ obj.plConfigs =
              obj.plConfigs ??
                  await obj.getConfigs()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [AppTheme]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> AppTheme?
  @override
  Future<AppTheme> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        AppTheme();
  }

  /// This method returns int. [AppTheme]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? appthemeCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final appthemesFuture = await _mnAppTheme!.toList(qparams);
    final int count = appthemesFuture[0]['CNT'] as int;
    if (appthemeCount != null) {
      appthemeCount(count);
    }
    return count;
  }

  /// This method returns List<AppTheme> [AppTheme]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<AppTheme>
  @override
  Future<List<AppTheme>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<AppTheme> appthemesData = await AppTheme.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return appthemesData;
  }

  /// This method returns Json String [AppTheme]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [AppTheme]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [AppTheme]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnAppTheme!.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<AppTheme>>
  Future<List<DropdownMenuItem<AppTheme>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<AppTheme>> o)?
          dropDownMenu]) async {
    buildParameters();
    final appthemesFuture = _mnAppTheme!.toList(qparams);

    final data = await appthemesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<AppTheme>> items = []..add(DropdownMenuItem(
        value: AppTheme(),
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: AppTheme.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final appthemesFuture = _mnAppTheme!.toList(qparams);

    final data = await appthemesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [AppTheme]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM appTheme WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnAppTheme!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [AppTheme]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnAppTheme!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await AppTheme.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnAppTheme!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AppThemeFilterBuilder

// region AppThemeFields
class AppThemeFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fThemeColor;
  static TableField get themeColor {
    return _fThemeColor = _fThemeColor ??
        SqlSyntax.setField(_fThemeColor, 'themeColor', DbType.integer);
  }
}
// endregion AppThemeFields

//region AppThemeManager
class AppThemeManager extends SqfEntityProvider {
  AppThemeManager()
      : super(VcareDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'appTheme';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion AppThemeManager
// region Token
class Token extends TableBase {
  Token({this.token, this.refreshToken}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Token.withFields(this.token, this.refreshToken, this._configId) {
    _setDefaultValues();
  }
  Token.withId(this.token, this.refreshToken, this._configId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Token.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['token'] != null) {
      token = o['token'].toString();
    }
    if (o['refreshToken'] != null) {
      refreshToken = o['refreshToken'].toString();
    }
    _configId = int.tryParse(o['_configId'].toString());
  }
  // FIELDS (Token)
  int? id;
  String? token;
  String? refreshToken;
  int? _configId;

  // end FIELDS (Token)

  static const bool _softDeleteActivated = false;
  TokenManager? __mnToken;

  TokenManager get _mnToken {
    return __mnToken = __mnToken ?? TokenManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (token != null || !forView) {
      map['token'] = token;
    }
    if (refreshToken != null || !forView) {
      map['refreshToken'] = refreshToken;
    }
    map['_configId'] = _configId;

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (token != null || !forView) {
      map['token'] = token;
    }
    if (refreshToken != null || !forView) {
      map['refreshToken'] = refreshToken;
    }
    map['_configId'] = _configId;

    return map;
  }

  /// This method returns Json String [Token]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Token]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [token, refreshToken, _configId];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [token, refreshToken, _configId];
  }

  static Future<List<Token>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Token.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Token>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Token>[];
    try {
      objList = list
          .map((token) => Token.fromMap(token as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Token.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Token>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Token> objList = <Token>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Token.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Token by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Token] if exist, otherwise returns null
  Future<Token?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Token? obj;
    final data = await _mnToken.getById([id]);
    if (data.length != 0) {
      obj = Token.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Token) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> _save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnToken.insert(this, ignoreBatch);
    } else {
      await _mnToken.update(this);
    }

    return id;
  }

  /// Saves the (Token) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> _saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnToken.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnToken.updateOrThrow(this);
    }

    return id;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnToken.rawInsert(
          'INSERT OR REPLACE INTO token ( token, refreshToken, _configId)  VALUES (?,?,?)',
          [token, refreshToken, _configId],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Token id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Token id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Token Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Token

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Token invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnToken
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnToken.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Token] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  TokenFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TokenFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TokenFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TokenFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion token

// region TokenField
class TokenField extends FilterBase {
  TokenField(TokenFilterBuilder tokenFB) : super(tokenFB);

  @override
  TokenFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder isNull() {
    return super.isNull() as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TokenFilterBuilder;
  }

  @override
  TokenFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TokenFilterBuilder;
  }

  @override
  TokenField get not {
    return super.not as TokenField;
  }
}
// endregion TokenField

// region TokenFilterBuilder
class TokenFilterBuilder extends ConjunctionBase {
  TokenFilterBuilder(Token obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnToken = obj._mnToken;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TokenManager? _mnToken;

  /// put the sql keyword 'AND'
  @override
  TokenFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TokenFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TokenFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TokenFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TokenFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TokenFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TokenFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TokenFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TokenFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TokenFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TokenFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TokenField _setField(TokenField? field, String colName, DbType dbtype) {
    return TokenField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TokenField? _id;
  TokenField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TokenField? _token;
  TokenField get token {
    return _token = _setField(_token, 'token', DbType.text);
  }

  TokenField? _refreshToken;
  TokenField get refreshToken {
    return _refreshToken =
        _setField(_refreshToken, 'refreshToken', DbType.text);
  }

  TokenField? __configId;
  TokenField get _configId {
    return __configId = _setField(__configId, '_configId', DbType.integer);
  }

  /// Deletes List<Token> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnToken!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnToken!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from token ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnToken!.updateBatch(qparams, values);
  }

  /// This method always returns [Token] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Token?
  @override
  Future<Token?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnToken!.toList(qparams);
    final data = await objFuture;
    Token? obj;
    if (data.isNotEmpty) {
      obj = Token.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Token]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Token?
  @override
  Future<Token> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Token();
  }

  /// This method returns int. [Token]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? tokenCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tokensFuture = await _mnToken!.toList(qparams);
    final int count = tokensFuture[0]['CNT'] as int;
    if (tokenCount != null) {
      tokenCount(count);
    }
    return count;
  }

  /// This method returns List<Token> [Token]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Token>
  @override
  Future<List<Token>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Token> tokensData = await Token.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tokensData;
  }

  /// This method returns Json String [Token]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Token]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Token]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnToken!.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Token>>
  Future<List<DropdownMenuItem<Token>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Token>> o)?
          dropDownMenu]) async {
    buildParameters();
    final tokensFuture = _mnToken!.toList(qparams);

    final data = await tokensFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Token>> items = []..add(DropdownMenuItem(
        value: Token(),
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Token.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final tokensFuture = _mnToken!.toList(qparams);

    final data = await tokensFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Token]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM token WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnToken!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Token]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnToken!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Token.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnToken!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TokenFilterBuilder

// region TokenFields
class TokenFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fToken;
  static TableField get token {
    return _fToken =
        _fToken ?? SqlSyntax.setField(_fToken, 'token', DbType.text);
  }

  static TableField? _fRefreshToken;
  static TableField get refreshToken {
    return _fRefreshToken = _fRefreshToken ??
        SqlSyntax.setField(_fRefreshToken, 'refreshToken', DbType.text);
  }
}
// endregion TokenFields

//region TokenManager
class TokenManager extends SqfEntityProvider {
  TokenManager()
      : super(VcareDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'token';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TokenManager
class VcareDbModelSequenceManager extends SqfEntityProvider {
  VcareDbModelSequenceManager() : super(VcareDbModel());
}
// END OF ENTITIES

// BEGIN CONTROLLERS
// BEGIN CONTROLLER (Config)
class ConfigToTokenControllerSub extends TokenController {
  static String relationshipFieldName = '_configId';
  static String primaryKeyName = 'id';
  static bool useSoftDeleting = false;
  //static String formListTitleField = 'baseUrl';
  //static String formListSubTitleField = 'name';
}

class ConfigController extends Config {
  String formListTitleField = 'baseUrl';
  String formListSubTitleField = 'name';
  static SQFViewList getController = SQFViewList(
    ConfigController(),
    primaryKeyName: 'id',
    useSoftDeleting: false,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};
    menu['ConfigToToken'] = 'Config To Token(_configId)';

    return menu;
  }

  SQFViewList? subList(int id, String controllerName) {
    switch (controllerName) {
      case 'ConfigToToken':
        return SQFViewList(
          ConfigToTokenControllerSub(),
          primaryKeyName: ConfigToTokenControllerSub.primaryKeyName,
          useSoftDeleting: ConfigToTokenControllerSub.useSoftDeleting,
          //formListTitleField: 'baseUrl',
          //formListSubTitleField: 'name',
          filterExpression:
              '${ConfigToTokenControllerSub.relationshipFieldName}=?',
          filterParameter: id,
        );

      default:
        return null;
    }
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return ConfigAdd(obj == null
        ? Config()
        : await Config().getById(obj['id'] as int) ?? Config());
  }
}
// END CONTROLLER (Config)

// BEGIN CONTROLLER (AppTheme)
class AppThemeToConfigControllerSub extends ConfigController {
  static String relationshipFieldName = 'appThemeId';
  static String primaryKeyName = 'id';
  static bool useSoftDeleting = false;
  //static String formListTitleField = 'name';
  //static String formListSubTitleField = 'themeColor';
}

class AppThemeController extends AppTheme {
  String formListTitleField = 'name';
  String formListSubTitleField = 'themeColor';
  static SQFViewList getController = SQFViewList(
    AppThemeController(),
    primaryKeyName: 'id',
    useSoftDeleting: false,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};
    menu['AppThemeToConfig'] = 'AppTheme To Config(appThemeId)';

    return menu;
  }

  SQFViewList? subList(int id, String controllerName) {
    switch (controllerName) {
      case 'AppThemeToConfig':
        return SQFViewList(
          AppThemeToConfigControllerSub(),
          primaryKeyName: AppThemeToConfigControllerSub.primaryKeyName,
          useSoftDeleting: AppThemeToConfigControllerSub.useSoftDeleting,
          //formListTitleField: 'name',
          //formListSubTitleField: 'themeColor',
          filterExpression:
              '${AppThemeToConfigControllerSub.relationshipFieldName}=?',
          filterParameter: id,
        );

      default:
        return null;
    }
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return AppThemeAdd(obj == null
        ? AppTheme()
        : await AppTheme().getById(obj['id'] as int) ?? AppTheme());
  }
}
// END CONTROLLER (AppTheme)

// BEGIN CONTROLLER (Token)

class TokenController extends Token {
  String formListTitleField = 'token';
  String formListSubTitleField = 'refreshToken';
  static SQFViewList getController = SQFViewList(
    TokenController(),
    primaryKeyName: 'id',
    useSoftDeleting: false,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return TokenAdd(obj == null
        ? Token()
        : await Token().getById(obj['id'] as int) ?? Token());
  }
}
// END CONTROLLER (Token)

// END OF CONTROLLERS
